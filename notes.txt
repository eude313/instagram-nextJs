import React, { useState, useEffect } from 'react';
import { Button, Input, Card, Modal, Avatar } from '@nextui-org/react';
import ApiService from '@/services/ApiService';

export default function PostManagement() {
  const [posts, setPosts] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [postFile, setPostFile] = useState(null);
  const [postCaption, setPostCaption] = useState('');
  const [comment, setComment] = useState('');

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    try {
      const data = await ApiService.getPosts();
      setPosts(data.results);
    } catch (error) {
      console.error('Error fetching posts:', error);
    }
  };

  const handleFileChange = (event) => {
    setPostFile(event.target.files[0]);
  };

  const handleUpload = async () => {
    if (!postFile) {
      alert('Please select a file to upload');
      return;
    }

    const formData = new FormData();
    formData.append('file', postFile);
    formData.append('caption', postCaption);

    try {
      await ApiService.createPost(formData);
      setIsModalOpen(false);
      setPostFile(null);
      setPostCaption('');
      fetchPosts();
    } catch (error) {
      console.error('Error uploading post:', error);
    }
  };

  const handleLike = async (postId) => {
    try {
      await ApiService.likePost(postId);
      fetchPosts();
    } catch (error) {
      console.error('Error liking post:', error);
    }
  };

  const handleComment = async (postId) => {
    try {
      await ApiService.addComment(postId, { content: comment });
      setComment('');
      fetchPosts();
    } catch (error) {
      console.error('Error adding comment:', error);
    }
  };

  const handleSave = async (postId) => {
    try {
      await ApiService.savePost(postId);
      fetchPosts();
    } catch (error) {
      console.error('Error saving post:', error);
    }
  };

  const handleShare = async (postId) => {
    try {
      const { share_link } = await ApiService.getShareLink(postId);
      // Here you might want to use a library like react-share to implement social sharing
      alert(`Share this link: ${share_link}`);
    } catch (error) {
      console.error('Error getting share link:', error);
    }
  };

  return (
    <div>
      <Button onClick={() => setIsModalOpen(true)}>Create New Post</Button>

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <Modal.Header>Create New Post</Modal.Header>
        <Modal.Body>
          <Input type="file" onChange={handleFileChange} accept="image/*, video/*" />
          <Input
            placeholder="Add a caption..."
            value={postCaption}
            onChange={(e) => setPostCaption(e.target.value)}
          />
        </Modal.Body>
        <Modal.Footer>
          <Button onClick={handleUpload}>Post</Button>
        </Modal.Footer>
      </Modal>

      <div className="posts">
        {posts.map((post) => (
          <Card key={post.id} className="mb-4">
            <Card.Body>
              <div className="flex items-center mb-2">
                <Avatar src={post.user.profile_picture} alt={post.user.username} />
                <span className="ml-2">{post.user.username}</span>
              </div>
              <img src={post.media_items[0].file} alt="Post" className="w-full mb-2" />
              <p>{post.caption}</p>
              <div className="flex justify-between mt-2">
                <Button onClick={() => handleLike(post.id)}>Like ({post.likes_count})</Button>
                <Button onClick={() => handleSave(post.id)}>Save</Button>
                <Button onClick={() => handleShare(post.id)}>Share</Button>
              </div>
              <div className="mt-2">
                <Input
                  placeholder="Add a comment..."
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                />
                <Button onClick={() => handleComment(post.id)}>Comment</Button>
              </div>
              <div className="mt-2">
                {post.comments.map((comment) => (
                  <p key={comment.id}><strong>{comment.user.username}</strong>: {comment.content}</p>
                ))}
              </div>
            </Card.Body>
          </Card>
        ))}
      </div>
    </div>
  );
}


# story

import React, { useState, useEffect } from 'react';
import { Button, Input, Card, Modal } from '@nextui-org/react';
import ApiService from '@/services/ApiService';

export default function StoryManagement() {
  const [myStories, setMyStories] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [storyFile, setStoryFile] = useState(null);
  const [storyCaption, setStoryCaption] = useState('');

  useEffect(() => {
    fetchMyStories();
  }, []);

  const fetchMyStories = async () => {
    try {
      const data = await ApiService.getMyStories();
      setMyStories(data);
    } catch (error) {
      console.error('Error fetching my stories:', error);
    }
  };

  const handleFileChange = (event) => {
    setStoryFile(event.target.files[0]);
  };

  const handleUpload = async () => {
    if (!storyFile) {
      alert('Please select a file to upload');
      return;
    }

    const formData = new FormData();
    formData.append('file', storyFile);
    formData.append('caption', storyCaption);

    try {
      await ApiService.createStory(formData);
      setIsModalOpen(false);
      setStoryFile(null);
      setStoryCaption('');
      fetchMyStories();
    } catch (error) {
      console.error('Error uploading story:', error);
    }
  };

  const handleDelete = async (storyId) => {
    try {
      await ApiService.deleteStory(storyId);
      fetchMyStories();
    } catch (error) {
      console.error('Error deleting story:', error);
    }
  };

  return (
    <div>
      <Button onClick={() => setIsModalOpen(true)}>Upload New Story</Button>

      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <Modal.Header>Upload New Story</Modal.Header>
        <Modal.Body>
          <Input type="file" onChange={handleFileChange} accept="image/*, video/*" />
          <Input
            placeholder="Add a caption..."
            value={storyCaption}
            onChange={(e) => setStoryCaption(e.target.value)}
          />
        </Modal.Body>
        <Modal.Footer>
          <Button onClick={handleUpload}>Upload</Button>
        </Modal.Footer>
      </Modal>

      <div className="my-stories">
        {myStories.map((story) => (
          <Card key={story.id}>
            <Card.Body>
              <p>{story.caption}</p>
              <Button onClick={() => handleDelete(story.id)}>Delete</Button>
            </Card.Body>
          </Card>
        ))}
      </div>
    </div>
  );
}




import ApiService from '@/lib/ApiService';
import EmojiPicker from 'emoji-picker-react';
import { AnimatePresence } from 'framer-motion';
import { useLike } from "@/contexts/LikeContext";
import HoverContent from '../Hoover/HoverContent';
import { usePostModal } from '@/hooks/usePostModal';
import HoverComponent from '../Hoover/HoverComponent';
import { Avatar, Image, Button } from "@nextui-org/react";
import React, { useState, useEffect, useRef } from 'react';
import ScaleUpVertBottom from '@/Animation/ScaleUpVertBottom';
import { Bookmark, Chat, DotsMenu, Emoji, Heart, Share } from '@/icons'; 

// import { Navigation, A11y } from 'swiper/modules';
// import { Swiper, SwiperSlide } from 'swiper/react';

// import 'swiper/css';
// import 'swiper/css/navigation';


export default function Posts({posts}) {
  const { openPostModal } = usePostModal();
  const [comment, setComment] = useState("");
  const [isOpen, setIsOpen] = useState(false);
  const emojiPickerRef = useRef(null);
  const { likes, toggleLike } = useLike();
  const [lastTap, setLastTap] = useState(0);
  const [showHeart, setShowHeart] = useState(false);

  
  const toggleEmojiPicker = () => {
    setIsOpen(!isOpen);
  };

  const handleEmojiSelect = (emojiObject) => {
    setComment(prevComment => prevComment + emojiObject.emoji);
  };

  const handleInputChange = (e) => {
    setComment(e.target.value);
  };

  const handleClickOutside = (event) => {
    if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleDoubleTap = async (itemId) => {
    try {
      await ApiService.likePost(itemId); 
      toggleLike(itemId); 
      setShowHeart(true);
      setTimeout(() => setShowHeart(false), 1000);
    } catch (error) {
      console.error('Error liking post:', error);
    }
  };

  const handleTap = (e, itemId) => {
    const currentTime = new Date().getTime();
    const tapLength = currentTime - lastTap;

    if (tapLength < 300 && tapLength > 0) {
      handleDoubleTap(itemId);
      e.preventDefault();
    }

    setLastTap(currentTime);
  };

  const handleSave = async (postId) => {
    try {
      await ApiService.savePost(postId); 
      alert("Post saved successfully");
    } catch (error) {
      console.error('Error saving post:', error);
    }
  };

  const handleShare = async (postId) => {
    try {
      const { share_link } = await ApiService.getShareLink(postId); 
      alert(`Share this link: ${share_link}`);
    } catch (error) {
      console.error('Error getting share link:', error);
    }
  };